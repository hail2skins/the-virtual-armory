package gun

import (
	"strconv"
	"github.com/hail2skins/the-virtual-armory/internal/models"
	"github.com/hail2skins/the-virtual-armory/cmd/web/views/partials"
)

templ New(weaponTypes []models.WeaponType, calibers []models.Caliber, manufacturers []models.Manufacturer) {
	@partials.BaseWithAuth(true) {
		<div class="max-w-3xl mx-auto">
			<div class="mb-6">
				<a href="/owner/guns" class="text-blue-600 hover:text-blue-800">‚Üê Back to My Guns</a>
			</div>
			<div class="bg-white shadow-md rounded-lg overflow-hidden">
				<div class="p-6">
					<h2 class="text-3xl font-bold mb-6">Add New Gun</h2>
					<form method="POST" action="/owner/guns">
						<div class="mb-4">
							<label for="name" class="block text-gray-700 font-bold mb-2">Name*</label>
							<input type="text" id="name" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g. Glock 19"/>
						</div>
						<div class="mb-4">
							<label for="weapon_type_id" class="block text-gray-700 font-bold mb-2">Weapon Type*</label>
							<select id="weapon_type_id" name="weapon_type_id" required class="select2 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
								<option value="">Select a weapon type</option>
								for _, weaponType := range weaponTypes {
									<option value={ strconv.FormatUint(uint64(weaponType.ID), 10) }>
										{ weaponType.Type }
										if weaponType.Nickname != "" {
											 ({ weaponType.Nickname })
										}
									</option>
								}
							</select>
						</div>
						<div class="mb-4">
							<label for="caliber_id" class="block text-gray-700 font-bold mb-2">Caliber*</label>
							<select id="caliber_id" name="caliber_id" required class="select2 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
								<option value="">Select a caliber</option>
								for _, caliber := range calibers {
									<option value={ strconv.FormatUint(uint64(caliber.ID), 10) }>{ caliber.Caliber }</option>
								}
							</select>
						</div>
						<div class="mb-4">
							<label for="manufacturer_id" class="block text-gray-700 font-bold mb-2">Manufacturer*</label>
							<select id="manufacturer_id" name="manufacturer_id" required class="select2 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
								<option value="">Select a manufacturer</option>
								for _, manufacturer := range manufacturers {
									<option value={ strconv.FormatUint(uint64(manufacturer.ID), 10) }>
										{ manufacturer.Name }
										if manufacturer.Nickname != "" {
											 ({ manufacturer.Nickname })
										}
									</option>
								}
							</select>
						</div>
						<div class="mb-6">
							<label for="acquired" class="block text-gray-700 font-bold mb-2">Acquired Date</label>
							<input type="date" id="acquired" name="acquired" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
							<p class="text-sm text-gray-500 mt-1">Optional. When did you acquire this gun?</p>
						</div>
						<div class="flex items-center justify-between">
							<button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
								Create Gun
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
		<script>
			$(document).ready(function() {
				// Initialize weapon type and manufacturer dropdowns with basic Select2
				$('#weapon_type_id, #manufacturer_id').select2({
					width: '100%',
					placeholder: "Search...",
					allowClear: true
				});
				
				// Initialize caliber dropdown with AJAX
				$('#caliber_id').select2({
					width: '100%',
					placeholder: "Search...",
					allowClear: true,
					minimumInputLength: 0,  // Allow searching with any number of characters
					ajax: {
						url: '/api/calibers/search',
						dataType: 'json',
						delay: 100,  // Reduce delay for faster response
						data: function(params) {
							// If params.term is undefined or empty, use an empty string
							var searchTerm = params.term || "";
							return {
								q: searchTerm
							};
						},
						processResults: function(data) {
							return {
								results: $.map(data.calibers, function(caliber) {
									return {
										id: caliber.ID,
										text: caliber.Caliber
									};
								})
							};
						},
						cache: true
					}
				});
			});
		</script>
	}
} 