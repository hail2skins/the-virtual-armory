package admin

import (
	"fmt"
	"github.com/hail2skins/the-virtual-armory/cmd/web/views/partials"
	"strconv"
	"time"
)

// ErrorData represents an error for display in the dashboard
type ErrorData struct {
	ID        uint
	Message   string
	Path      string
	Count     int
	LastSeen  time.Time
	FirstSeen time.Time
	Status    int
}

type RecentError struct {
	ErrorType    string
	Count        int64
	LastOccurred time.Time
	Path         string
}

type ErrorMetricsData struct {
	TotalErrors        int64
	ErrorRate          float64
	ErrorRateChange    float64
	TopErrors          []ErrorData
	RecentErrors       []RecentError
	ErrorsByPath       map[string]int64
	ErrorsByStatus     map[int]int64
	ErrorsByTimeOfDay  map[int]int64
	ErrorsByDayOfWeek  map[string]int64
	CurrentPage        int
	TotalPages         int
	PerPage            int
	SortBy             string
	SortOrder          string
	ErrorRates         map[string]float64
	LatencyPercentiles map[string]float64
	Stats              map[string]interface{}
	TimeRange          string
}

templ ErrorMetrics(data ErrorMetricsData) {
	@partials.BaseAdmin(true, "/admin/error-metrics") {
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold mb-6">Error Metrics Dashboard</h1>
			
			<div class="mb-6">
				<h2 class="text-xl font-semibold mb-2">Time Range</h2>
				<div class="flex space-x-2">
					<a href="/admin/error-metrics?range=1h" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "1h"), templ.KV("bg-gray-200", data.TimeRange != "1h") }>1 Hour</a>
					<a href="/admin/error-metrics?range=6h" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "6h"), templ.KV("bg-gray-200", data.TimeRange != "6h") }>6 Hours</a>
					<a href="/admin/error-metrics?range=24h" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "24h"), templ.KV("bg-gray-200", data.TimeRange != "24h") }>24 Hours</a>
					<a href="/admin/error-metrics?range=7d" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "7d"), templ.KV("bg-gray-200", data.TimeRange != "7d") }>7 Days</a>
					<a href="/admin/error-metrics?range=30d" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "30d"), templ.KV("bg-gray-200", data.TimeRange != "30d") }>30 Days</a>
				</div>
			</div>
			
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">Error Rates</h2>
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Endpoint</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Error Rate</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								for endpoint, rate := range data.ErrorRates {
									<tr>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ endpoint }</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ fmt.Sprintf("%.2f%%", rate) }</td>
									</tr>
								}
								if len(data.ErrorRates) == 0 {
									<tr>
										<td colspan="2" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">No error rates available</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
				
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">Latency Percentiles</h2>
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Percentile</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Latency (ms)</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">50th</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ fmt.Sprintf("%.2f", data.LatencyPercentiles["p50"]) }</td>
								</tr>
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">90th</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ fmt.Sprintf("%.2f", data.LatencyPercentiles["p90"]) }</td>
								</tr>
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">99th</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ fmt.Sprintf("%.2f", data.LatencyPercentiles["p99"]) }</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
			
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h2 class="text-xl font-semibold mb-4">Recent Errors</h2>
				<div class="overflow-x-auto">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Error Type</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Path</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Count</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Occurred</th>
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							for _, err := range data.RecentErrors {
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ err.ErrorType }</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ err.Path }</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ strconv.FormatInt(err.Count, 10) }</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ err.LastOccurred.Format("Jan 02, 2006 15:04:05") }</td>
								</tr>
							}
							if len(data.RecentErrors) == 0 {
								<tr>
									<td colspan="4" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">No recent errors</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">Overall Stats</h2>
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Metric</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								for metric, value := range data.Stats {
									<tr>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ metric }</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ fmt.Sprintf("%v", value) }</td>
									</tr>
								}
								if len(data.Stats) == 0 {
									<tr>
										<td colspan="2" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">No stats available</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
				
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">Actions</h2>
					<div class="space-y-4">
						<a href="/admin/error-metrics/clear" class="block w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded text-center">
							Clear Error Metrics
						</a>
						<a href="/admin/dashboard" class="block w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded text-center">
							Back to Dashboard
						</a>
					</div>
				</div>
			</div>
		</div>
	}
} 