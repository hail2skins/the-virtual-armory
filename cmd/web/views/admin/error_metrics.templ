package admin

import (
	"github.com/hail2skins/the-virtual-armory/cmd/web/views/partials"
	"time"
	"fmt"
	"strconv"
)

type ErrorMetricsData struct {
	ErrorRates         map[string]float64
	LatencyPercentiles map[string]float64
	RecentErrors       []RecentError
	Stats              map[string]interface{}
	TimeRange          string
}

type RecentError struct {
	ErrorType    string
	Count        int64
	LastOccurred time.Time
	Path         string
}

templ ErrorMetrics(data ErrorMetricsData) {
	@partials.BaseAdmin(true) {
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold mb-6">Error Metrics Dashboard</h1>
			
			<div class="mb-6">
				<h2 class="text-xl font-semibold mb-2">Time Range</h2>
				<div class="flex space-x-2">
					<a href="/admin/error-metrics?range=1h" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "1h"), templ.KV("bg-gray-200", data.TimeRange != "1h") }>1 Hour</a>
					<a href="/admin/error-metrics?range=6h" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "6h"), templ.KV("bg-gray-200", data.TimeRange != "6h") }>6 Hours</a>
					<a href="/admin/error-metrics?range=24h" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "24h"), templ.KV("bg-gray-200", data.TimeRange != "24h") }>24 Hours</a>
					<a href="/admin/error-metrics?range=7d" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "7d"), templ.KV("bg-gray-200", data.TimeRange != "7d") }>7 Days</a>
					<a href="/admin/error-metrics?range=30d" class={ "px-4 py-2 rounded", templ.KV("bg-blue-500 text-white", data.TimeRange == "30d"), templ.KV("bg-gray-200", data.TimeRange != "30d") }>30 Days</a>
				</div>
			</div>
			
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
				<div class="bg-white p-6 rounded-lg shadow-md">
					<h2 class="text-xl font-semibold mb-4">Error Rates</h2>
					if len(data.ErrorRates) == 0 {
						<p class="text-gray-500">No errors recorded in this time period.</p>
					} else {
						<div class="overflow-x-auto">
							<table class="min-w-full">
								<thead>
									<tr class="bg-gray-100">
										<th class="px-4 py-2 text-left">Error Type</th>
										<th class="px-4 py-2 text-right">Count</th>
									</tr>
								</thead>
								<tbody>
									for errorType, count := range data.ErrorRates {
										<tr class="border-t">
											<td class="px-4 py-2">{ errorType }</td>
											<td class="px-4 py-2 text-right">{ fmt.Sprintf("%.0f", count) }</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
				
				<div class="bg-white p-6 rounded-lg shadow-md">
					<h2 class="text-xl font-semibold mb-4">Latency Percentiles</h2>
					<div class="grid grid-cols-3 gap-4">
						<div class="bg-gray-100 p-4 rounded text-center">
							<div class="text-2xl font-bold">{ fmt.Sprintf("%.2f", data.LatencyPercentiles["p50"]) }ms</div>
							<div class="text-sm text-gray-600">50th Percentile</div>
						</div>
						<div class="bg-gray-100 p-4 rounded text-center">
							<div class="text-2xl font-bold">{ fmt.Sprintf("%.2f", data.LatencyPercentiles["p95"]) }ms</div>
							<div class="text-sm text-gray-600">95th Percentile</div>
						</div>
						<div class="bg-gray-100 p-4 rounded text-center">
							<div class="text-2xl font-bold">{ fmt.Sprintf("%.2f", data.LatencyPercentiles["p99"]) }ms</div>
							<div class="text-sm text-gray-600">99th Percentile</div>
						</div>
					</div>
				</div>
			</div>
			
			<div class="bg-white p-6 rounded-lg shadow-md mb-8">
				<h2 class="text-xl font-semibold mb-4">Recent Errors</h2>
				if len(data.RecentErrors) == 0 {
					<p class="text-gray-500">No recent errors.</p>
				} else {
					<div class="overflow-x-auto">
						<table class="min-w-full">
							<thead>
								<tr class="bg-gray-100">
									<th class="px-4 py-2 text-left">Error Type</th>
									<th class="px-4 py-2 text-left">Path</th>
									<th class="px-4 py-2 text-right">Count</th>
									<th class="px-4 py-2 text-right">Last Occurred</th>
								</tr>
							</thead>
							<tbody>
								for _, err := range data.RecentErrors {
									<tr class="border-t">
										<td class="px-4 py-2">{ err.ErrorType }</td>
										<td class="px-4 py-2">{ err.Path }</td>
										<td class="px-4 py-2 text-right">{ strconv.FormatInt(err.Count, 10) }</td>
										<td class="px-4 py-2 text-right">{ err.LastOccurred.Format("2006-01-02 15:04:05") }</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</div>
			
			<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
				<div class="bg-white p-6 rounded-lg shadow-md">
					<h2 class="text-xl font-semibold mb-4">Status Code Distribution</h2>
					if statusCounts, ok := data.Stats["status_counts"].(map[int]interface{}); ok && len(statusCounts) > 0 {
						<div class="overflow-x-auto">
							<table class="min-w-full">
								<thead>
									<tr class="bg-gray-100">
										<th class="px-4 py-2 text-left">Status Code</th>
										<th class="px-4 py-2 text-right">Count</th>
									</tr>
								</thead>
								<tbody>
									for code, entry := range statusCounts {
										if entryMap, ok := entry.(map[string]interface{}); ok {
											if count, ok := entryMap["Count"].(float64); ok {
												<tr class="border-t">
													<td class="px-4 py-2">{ strconv.Itoa(code) }</td>
													<td class="px-4 py-2 text-right">{ fmt.Sprintf("%.0f", count) }</td>
												</tr>
											}
										}
									}
								</tbody>
							</table>
						</div>
					} else {
						<p class="text-gray-500">No status code data available.</p>
					}
				</div>
				
				<div class="bg-white p-6 rounded-lg shadow-md">
					<h2 class="text-xl font-semibold mb-4">Endpoint Distribution</h2>
					if endpointCounts, ok := data.Stats["endpoint_counts"].(map[string]interface{}); ok && len(endpointCounts) > 0 {
						<div class="overflow-x-auto">
							<table class="min-w-full">
								<thead>
									<tr class="bg-gray-100">
										<th class="px-4 py-2 text-left">Endpoint</th>
										<th class="px-4 py-2 text-right">Count</th>
									</tr>
								</thead>
								<tbody>
									for endpoint, entry := range endpointCounts {
										if entryMap, ok := entry.(map[string]interface{}); ok {
											if count, ok := entryMap["Count"].(float64); ok {
												<tr class="border-t">
													<td class="px-4 py-2">{ endpoint }</td>
													<td class="px-4 py-2 text-right">{ fmt.Sprintf("%.0f", count) }</td>
												</tr>
											}
										}
									}
								</tbody>
							</table>
						</div>
					} else {
						<p class="text-gray-500">No endpoint data available.</p>
					}
				</div>
				
				<div class="bg-white p-6 rounded-lg shadow-md">
					<h2 class="text-xl font-semibold mb-4">Error Type Distribution</h2>
					if errorCounts, ok := data.Stats["error_counts"].(map[string]interface{}); ok && len(errorCounts) > 0 {
						<div class="overflow-x-auto">
							<table class="min-w-full">
								<thead>
									<tr class="bg-gray-100">
										<th class="px-4 py-2 text-left">Error Type</th>
										<th class="px-4 py-2 text-right">Count</th>
									</tr>
								</thead>
								<tbody>
									for errorType, entry := range errorCounts {
										if entryMap, ok := entry.(map[string]interface{}); ok {
											if count, ok := entryMap["Count"].(float64); ok {
												<tr class="border-t">
													<td class="px-4 py-2">{ errorType }</td>
													<td class="px-4 py-2 text-right">{ fmt.Sprintf("%.0f", count) }</td>
												</tr>
											}
										}
									}
								</tbody>
							</table>
						</div>
					} else {
						<p class="text-gray-500">No error type data available.</p>
					}
				</div>
			</div>
		</div>
	}
} 