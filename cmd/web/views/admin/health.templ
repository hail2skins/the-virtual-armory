package admin

import (
	"fmt"
	"github.com/hail2skins/the-virtual-armory/cmd/web/views/partials"
	"time"
)

// SystemMetrics contains system resource metrics
type SystemMetrics struct {
	MemoryUsageMB    float64
	TotalAllocatedMB float64
	SystemMemoryMB   float64
	Goroutines       int
	NumCPU           int
}

// ExternalService represents an external service and its status
type ExternalService struct {
	Name   string
	Status string
}

// DetailedHealthData contains detailed health information
type DetailedHealthData struct {
	Status           string
	Timestamp        time.Time
	Database         string
	System           SystemMetrics
	ExternalServices []ExternalService
	Version          string
}

// FormatBytes formats bytes to a human-readable format
func FormatBytes(bytes float64) string {
	const unit = 1024.0
	if bytes < unit {
		return fmt.Sprintf("%.2f B", bytes)
	}
	div, exp := unit, 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.2f %ciB", bytes/div, "KMGTPE"[exp])
}

templ DetailedHealth(data DetailedHealthData) {
	@partials.BaseAdmin(true, "/admin/health") {
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold mb-6">System Health</h1>
			
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
				<div class="bg-white rounded-lg shadow-md p-6">
					<div class="flex items-center justify-between mb-4">
						<h2 class="text-xl font-semibold">System Status</h2>
						<span class={ "px-3 py-1 rounded-full text-sm font-semibold", templ.KV("bg-green-100 text-green-800", data.Status == "ok"), templ.KV("bg-yellow-100 text-yellow-800", data.Status == "degraded"), templ.KV("bg-red-100 text-red-800", data.Status == "critical") }>
							{ data.Status }
						</span>
					</div>
					<div class="border-t pt-4">
						<div class="grid grid-cols-2 gap-4">
							<div>
								<p class="text-sm text-gray-500">Last Updated</p>
								<p class="font-medium">{ data.Timestamp.Format("Jan 02, 2006 15:04:05") }</p>
							</div>
							<div>
								<p class="text-sm text-gray-500">Version</p>
								<p class="font-medium">{ data.Version }</p>
							</div>
							<div>
								<p class="text-sm text-gray-500">Database</p>
								<p class={ "font-medium", templ.KV("text-green-600", data.Database == "connected"), templ.KV("text-red-600", data.Database != "connected") }>
									{ data.Database }
								</p>
							</div>
						</div>
					</div>
				</div>
				
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">External Services</h2>
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								for _, service := range data.ExternalServices {
									<tr>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ service.Name }</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm">
											<span class={ "px-2 py-1 rounded-full text-xs font-semibold", templ.KV("bg-green-100 text-green-800", service.Status == "connected"), templ.KV("bg-yellow-100 text-yellow-800", service.Status == "degraded"), templ.KV("bg-red-100 text-red-800", service.Status == "disconnected") }>
												{ service.Status }
											</span>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
			
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h2 class="text-xl font-semibold mb-4">System Resources</h2>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
					<div>
						<h3 class="text-lg font-medium mb-2">Memory Usage</h3>
						<div class="bg-gray-200 rounded-full h-4 mb-2">
							<div class="bg-blue-600 h-4 rounded-full" style={ fmt.Sprintf("width: %.1f%%", (data.System.MemoryUsageMB/data.System.SystemMemoryMB)*100) }></div>
						</div>
						<div class="flex justify-between text-sm text-gray-600">
							<span>{ FormatBytes(data.System.MemoryUsageMB * 1024 * 1024) }</span>
							<span>{ FormatBytes(data.System.SystemMemoryMB * 1024 * 1024) }</span>
						</div>
					</div>
					
					<div>
						<h3 class="text-lg font-medium mb-2">Goroutines</h3>
						<p class="text-3xl font-bold">{ fmt.Sprintf("%d", data.System.Goroutines) }</p>
					</div>
					
					<div>
						<h3 class="text-lg font-medium mb-2">CPU Cores</h3>
						<p class="text-3xl font-bold">{ fmt.Sprintf("%d", data.System.NumCPU) }</p>
					</div>
				</div>
			</div>
			
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">Memory Details</h2>
					<div class="space-y-4">
						<div>
							<p class="text-sm text-gray-500">Current Allocation</p>
							<p class="text-xl font-bold">{ FormatBytes(data.System.MemoryUsageMB * 1024 * 1024) }</p>
						</div>
						<div>
							<p class="text-sm text-gray-500">Total Allocated</p>
							<p class="text-xl font-bold">{ FormatBytes(data.System.TotalAllocatedMB * 1024 * 1024) }</p>
						</div>
						<div>
							<p class="text-sm text-gray-500">System Memory</p>
							<p class="text-xl font-bold">{ FormatBytes(data.System.SystemMemoryMB * 1024 * 1024) }</p>
						</div>
					</div>
				</div>
				
				<div class="bg-white rounded-lg shadow-md p-6">
					<h2 class="text-xl font-semibold mb-4">Actions</h2>
					<div class="space-y-4">
						<a href="/admin/health/refresh" class="block w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded text-center">
							Refresh Health Data
						</a>
						<a href="/admin/dashboard" class="block w-full bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded text-center">
							Back to Dashboard
						</a>
					</div>
				</div>
			</div>
		</div>
	}
} 